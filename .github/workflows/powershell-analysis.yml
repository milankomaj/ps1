# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: PSScriptAnalyzer

on:
  workflow_dispatch:

  pull_request:
    branches: [ main ]

jobs:
  build:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.SCRIPT }}
      output2: ${{ steps.step1.outputs.PATH }}
    strategy:
      max-parallel: 3
      matrix:
        include:
           - path: executables/BING_2
             script: bing-wallpaper.ps1
           - path: executables/Himawari
             script: himawari.ps1

    steps:
      - uses: actions/checkout@v2
      - name: Echo site details
        env:
          path: ${{ matrix.path }}
          script: ${{ matrix.script }}
        run: |
         echo $path $script
         echo "::set-output name=SCRIPT::${{ matrix.script }}"
         echo "::set-output name=PATH::${{ matrix.path }}"

     # upload artifact (.ps1.bak)
      - name: Create .bak files
        run: |
         cp ./${{ matrix.path }}/${{ matrix.script }}{,.bak}
      - uses: actions/upload-artifact@v2
        with:
         name: prebuild
         path: |
          ./${{ matrix.path }}/${{ matrix.script }}.bak
          ./*.sarif
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@2044ae068e37d0161fa2127de04c19633882f061
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          # Include your own basic security rules. Removing this option will run all the rules
          # includeRule: ''
          # excludeRule: '"PSAvoidUsingWriteHost", "PSAvoidTrailingWhitespace"'
          output: ${{ matrix.script }}.results.sarif
          path: ./
          recurse: true
          fix: true
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ matrix.script }}.results.sarif
      # Artifacts upload
      - uses: actions/upload-artifact@v2
        with:
         name: prebuild
         path: |
          ./*.sarif
          ./${{ matrix.path }}/${{ matrix.script }}


     # Artifacts download
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
         name: prebuild
         path: ./
     # tree
      - name: Display structure of downloaded files
        run: tree -h ./
      - name: 'Echo download path'
        run: echo ${{steps.download.outputs.download-path}}
     # virustotal
      - name: virustotal
        run: |
         sha256sum ${{steps.download.outputs.download-path}}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " "
         sum=$(sha256sum ${{steps.download.outputs.download-path}}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " ")
         echo $sum
         echo UPLOAD
         curl --request POST \
          --url https://www.virustotal.com/api/v3/files \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
          --form file=@/${{steps.download.outputs.download-path}}/${{ matrix.path }}/${{ matrix.script }}
         echo DATA
         curl --request GET \
          --url https://www.virustotal.com/api/v3/files/$sum \
          --header 'x-apikey: ${{ secrets.VTAPI }}'

  # dry_run ðŸ”„ðŸ”„
  dry_run:
    runs-on: windows-latest
    needs: [build]
    strategy:
     fail-fast: false
     matrix:
      PrebuildScript: [himawari.ps1, bing-wallpaper.ps1]
    steps:
     # Artifacts download
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
         name: prebuild
         path: ./
      - name: 'Echo download path'
        run: echo ${{steps.download.outputs.download-path}}

     # Run script
      - name: run script if
        shell: powershell
        if: ${{ matrix.PrebuildScript == 'bing-wallpaper.ps1' }}
        run: |
          $textToAdd = '$outpath = "./BingWallpaper"'
          $BingLineNumber = 42
          $fileContent = Get-Content ./executables/BING_2/bing-wallpaper.ps1
          $fileContent[$BingLineNumber-1] = $textToAdd
          $fileContent | Set-Content ./executables/BING_2/bing-wallpaper.ps1

          $textToAdd2 = ' <debug>true</debug>'
          $BingLineNumber2 = 11
          $fileContent2 = Get-Content ./executables/BING_2/SettingsBw.xml
          $fileContent2[$BingLineNumber2-1] = $textToAdd2
          $fileContent2 | Set-Content ./executables/BING_2/SettingsBw.xml

      - name: run script
        shell: powershell
        run: |
          echo ${{steps.download.outputs.download-path}}
          echo ${{needs.build.outputs.output2}}
          echo ${{ matrix.PrebuildScript }}
          ${{steps.download.outputs.download-path}}${{needs.build.outputs.output2}}/${{ matrix.PrebuildScript }}
          Write-Output "This is prebuild ${{steps.download.outputs.download-path}}${{needs.build.outputs.output2}}/${{ matrix.PrebuildScript }}  script."
          type ${{steps.download.outputs.download-path}}${{needs.build.outputs.output2}}/${{ matrix.PrebuildScript }}