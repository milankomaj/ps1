# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: PSScriptAnalyzer

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
    - '**.ps1'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      max-parallel: 3
      matrix:
        include:
           - path: executables/BING_2
             script: bing-wallpaper
           - path: executables/Himawari
             script: himawari
           - path: executables/LigtDark
             script: LigtDark

    steps:
      - uses: actions/checkout@v4
      - name: details
        env:
          path: ${{ matrix.path }}
          script: ${{ matrix.script }}.ps1
        run: |
         echo ${{ matrix.path }}/${{ matrix.script }}.ps1
         echo 'artifact (.ps1.bak)'
         cp ./${{ matrix.path }}/${{ matrix.script }}.ps1{,.bak}


      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@6b2948b1944407914a58661c49941824d149734f
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          # Include your own basic security rules. Removing this option will run all the rules
          # includeRule: ''
          # excludeRule: '"PSAvoidUsingWriteHost", "PSAvoidTrailingWhitespace"'
          output: ./${{ matrix.path }}/${{ matrix.script }}.ps1.results.sarif
          path: ./${{ matrix.path }}/${{ matrix.script }}.ps1
          recurse: false
          fix: true

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./${{ matrix.path }}/${{ matrix.script }}.ps1.results.sarif
      # Artifacts upload
      - uses: actions/upload-artifact@v4
        with:
         name: ${{ matrix.script }}
         path: |
          ./${{ matrix.path }}/*.sarif
          ./${{ matrix.path }}/${{ matrix.script }}.ps1
          ./${{ matrix.path }}/${{ matrix.script }}.ps1.bak

 # virustotal && metadefender
  scan:
    runs-on: ubuntu-latest
    outputs:
     output1: ${{ steps.SUM.outputs.sha256 }}
    needs: []
    strategy:
     max-parallel: 5
     fail-fast: false
     matrix:
      include:
           - path: executables/BING_2
             script: bing-wallpaper
           - path: executables/Himawari
             script: himawari
           - path: executables/LigtDark
             script: LigtDark
    steps:
      - uses: actions/checkout@v4
      - name: virustotal && metadefender
        id: SUM
        run: |
         echo sha256sum
         sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }}.ps1 | cut -f 1 -d " "
         sum=$(sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }}.ps1 | cut -f 1 -d " ")
         echo $sum
         echo "sha256=$(echo $sum)" >> $GITHUB_OUTPUT

         echo UPLOAD Virustotal
         curl -s --request POST \
          --url https://www.virustotal.com/api/v3/files \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
          --header 'accept: application/json' \
          --header 'content-type: multipart/form-data' \
          --form file=@/${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }}.ps1 \
         | jq

         echo DATA Virustotal
         curl -s --request GET \
          --url https://www.virustotal.com/api/v3/files/$sum \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
          --header 'accept: application/json' \
         | jq .data.attributes.last_analysis_stats

         echo UPLOAD Metadefender
         downloadurl=(https://raw.githubusercontent.com/${{ github.repository }}/main/${{ matrix.path }}/${{ matrix.script }}.ps1)
         echo downloadurl=$downloadurl
         curl -s --request POST \
          --url https://api.metadefender.com/v4/file \
          --header "downloadfrom: $downloadurl" \
          --header "apikey: ${{ secrets.META }}" \
          --header "Content-Type: application/octet-stream" \
          --header "filename: ${{ github.workflow }}_${{ matrix.script }}.ps1" \
         | jq

         echo DATA Metadefender
         curl -s --request GET \
          --url https://api.metadefender.com/v4/hash/$sum \
          --header "downloadfrom: $downloadurl" \
          --header "apikey: ${{ secrets.META }}" \
          --header "Content-Type: application/octet-stream" \
         | jq '"total scan: \(.scan_results.total_avs), detected: \(.scan_results.total_detected_avs)"'

     # outputs
      - name: outputs
        run: |
          echo outputs
          echo ${{ steps.SUM.outputs.sha256}}
          echo github=${{ github }}
          echo github.action=${{ github.action }}
          echo github.action_path=${{ github.action_path }}
          echo github.actor=${{ github.actor }}
          echo github.base_ref=${{ github.base_ref }}
          echo github.event=${{ github.event }}
          echo github.event_name=${{ github.event_name }}
          echo github.event_path=${{ github.event_path }}
          echo github.head_ref=${{ github.head_ref }}
          echo github.job=${{ github.job }}
          echo github.ref=${{ github.ref }}
          echo github.ref_name=${{ github.ref_name }}
          echo github.ref_protected=${{ github.ref_protected }}
          echo github.ref_type=${{ github.ref_type }}
          echo github.repository=${{ github.repository }}
          echo github.run_id=${{ github.run_id }}
          echo github.run_number=${{ github.run_number }}
          echo github.run_attempt=${{ github.run_attempt }}
          echo github.server_url=${{ github.server_url }}
          echo github.sha=${{ github.sha }}
          echo github.workflow=${{ github.workflow }}
          echo github.repository_owner=${{ github.repository_owner }}

  # dry_run ðŸ”„ðŸ”„
  dry_run:
    needs: [build]
    strategy:
     max-parallel: 5
     fail-fast: false
     matrix:
      include:
           - path: executables/BING_2
             script: bing-wallpaper
           - path: executables/Himawari
             script: himawari
           - path: executables/LigtDark
             script: LigtDark
    runs-on: windows-latest 
    
    steps:
     # Run script
      - uses: actions/checkout@v4
      - name: run script if bing-wallpaper.ps1
        shell: pwsh
        if: ${{ matrix.script == 'bing-wallpaper' }}
        run: |
          $textToAdd = '$outpath = "./BingWallpaper"'
          $BingLineNumber = 29
          $fileContent = Get-Content ./executables/BING_2/bing-wallpaper.ps1
          $fileContent[$BingLineNumber-1] = $textToAdd
          $fileContent | Set-Content ./executables/BING_2/bing-wallpaper.ps1

          $textToAdd2 = ' <debug>true</debug>'
          $BingLineNumber2 = 11
          $fileContent2 = Get-Content ./executables/BING_2/SettingsBw.xml
          $fileContent2[$BingLineNumber2-1] = $textToAdd2
          $fileContent2 | Set-Content ./executables/BING_2/SettingsBw.xml


      - name: run script powershell
        shell: powershell
        run: |
          echo ${{ github.workspace }}
          echo ${{ matrix.script }}.ps1
          cd ${{ matrix.path }}
          dir -r  | Select-Object Name,Length,LastWriteTime
          ./${{ matrix.script }}.ps1
          Write-Output "This is ${{ matrix.script }}.ps1  script."
          type ${{ matrix.script }}.ps1

      - name: run script pwsh # not all suported
        shell: pwsh
        run: |
         cd ${{ matrix.path }}
         ./${{ matrix.script }}.ps1

  push:
    runs-on: windows-latest
    needs: [build,dry_run,scan]
    steps:
     # Artifacts download
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        id: download
        with:      
         merge-multiple: true
         path: ./artifact  
      - run: ls -R ./
         
      - name: 'download path && dir && Copy-Item'
        run: |
         echo ${{steps.download.outputs.download-path}}
         dir ./artifact | Select-Object Name,Length,LastWriteTime
         Copy-Item "./artifact/bing-wallpaper.ps1" -Destination "./executables/BING_2"
         Copy-Item "./artifact/himawari.ps1" -Destination "./executables/Himawari"
         Copy-Item "./artifact/LigtDark.ps1" -Destination "./executables/LigtDark"

      - name: Update scripts
        run: |
         $timestamp= (Get-Date -UFormat "%A %d/%m/%Y %T %Z")
         echo $timestamp
         git config --global user.email ${{ secrets.EMAIL }}
         git config --global user.name ${{ secrets.NAME }}
         git add -u
         git commit -m "PSScriptAnalyzer $timestamp"
         git push
