# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: PSScriptAnalyzer

on:
  workflow_dispatch:

  pull_request:
    branches: [ main ]

jobs:
  build:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.HimawariSum }}
      output2: ${{ steps.step1.outputs.BingSum }}
    strategy:
      max-parallel: 3
      matrix:
        include:
           - path: executables/BING_2
             script: bing-wallpaper.ps1
           - path: executables/Himawari
             script: himawari.ps1

    steps:
      - uses: actions/checkout@v2
      - name: details
        env:
          path: ${{ matrix.path }}
          script: ${{ matrix.script }}
        run: |
         echo $path $script
         echo artifact (.ps1.bak)
         cp ./${{ matrix.path }}/${{ matrix.script }}{,.bak}


      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@2044ae068e37d0161fa2127de04c19633882f061
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          # Include your own basic security rules. Removing this option will run all the rules
          # includeRule: ''
          # excludeRule: '"PSAvoidUsingWriteHost", "PSAvoidTrailingWhitespace"'
          output: ./${{ matrix.path }}/${{ matrix.script }}.results.sarif
          path: ./${{ matrix.path }}/${{ matrix.script }}
          recurse: false
          fix: true

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./${{ matrix.path }}/${{ matrix.script }}.results.sarif
      # Artifacts upload
      - uses: actions/upload-artifact@v2
        with:
         path: |
          ./${{ matrix.path }}/*.sarif
          ./${{ matrix.path }}/${{ matrix.script }}
          ./${{ matrix.path }}/${{ matrix.script }}.bak

     # virustotal && metadefender
      - name: virustotal && metadefender
        id: SUM
        run: |
         echo sha256sum
         sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " "
         sum=$(sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " ")
         echo $sum
         if [ ${{ matrix.script }} == 'himawari.ps1' ]
         then
         echo "::set-output name=HimawariSum::$(echo $sum)"
         else
         echo "::set-output name=BingSum::$(echo $sum)"
         fi

         echo UPLOAD
         curl -s --request POST \
          --url https://www.virustotal.com/api/v3/files \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
          --form file=@/${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} \
         | jq

         echo DATA
         curl -s --request GET \
          --url https://www.virustotal.com/api/v3/files/$sum \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
         | jq .data.attributes.last_analysis_stats

         echo meta test
         downloadurl=(https://raw.githubusercontent.com/${{ github.repository }}/main/${{ matrix.path }}/${{ matrix.script }})
         echo downloadurl=$downloadurl
         curl -s --request POST \
          --url https://api.metadefender.com/v4/file \
          --header "downloadfrom: $downloadurl" \
          --header "apikey: ${{ secrets.META }}" \
          --header "Content-Type: application/octet-stream" \
          --header "filename: ${{ matrix.script }}" \
          --header "sandbox: windows10" \
          --header "sandbox_timeout: long" \
          --header "rescan_count: 100" \
         | jq

         echo DATA
         curl -s --request GET \
          --url https://api.metadefender.com/v4/hash/$sum \
          --header "downloadfrom: $downloadurl" \
          --header "apikey: ${{ secrets.META }}" \
          --header "Content-Type: application/octet-stream" \
         | jq '"total scan: \(.scan_results.total_avs),detected: \(.scan_results.total_detected_avs)"'

     # outputs
      - name: outputs
        run: |
         echo outputs
         echo ${{ steps.SUM.outputs.HimawariSum }}
         echo ${{ steps.SUM.outputs.BingSum }}

  # dry_run ðŸ”„ðŸ”„
  dry_run:
    runs-on: windows-latest
    needs: [build]
    strategy:
     fail-fast: false
     matrix:
      include:
           - path: executables/BING_2
             script: bing-wallpaper.ps1
           - path: executables/Himawari
             script: himawari.ps1
    steps:
     # Run script
      - uses: actions/checkout@v2
      - name: run script if
        shell: pwsh
        if: ${{ matrix.script == 'bing-wallpaper.ps1' }}
        run: |
          $textToAdd = '$outpath = "./BingWallpaper"'
          $BingLineNumber = 42
          $fileContent = Get-Content ./executables/BING_2/bing-wallpaper.ps1
          $fileContent[$BingLineNumber-1] = $textToAdd
          $fileContent | Set-Content ./executables/BING_2/bing-wallpaper.ps1

          $textToAdd2 = ' <debug>true</debug>'
          $BingLineNumber2 = 11
          $fileContent2 = Get-Content ./executables/BING_2/SettingsBw.xml
          $fileContent2[$BingLineNumber2-1] = $textToAdd2
          $fileContent2 | Set-Content ./executables/BING_2/SettingsBw.xml


      - name: run script
        shell: powershell
        run: |
          echo ${{ github.workspace }}
          echo ${{ matrix.script }}
          cd ${{ matrix.path }}
          dir -r  | Select-Object Name,Length,LastWriteTime
          ./${{ matrix.script }}
          Write-Output "This is ${{ matrix.script }}  script."
          type ${{ matrix.script }}


  push:
    runs-on: windows-latest
    needs: [build,dry_run]
    steps:
     # Artifacts download
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
         path: ./
      - name: 'download path && dir && Copy-Item'
        run: |
         echo ${{steps.download.outputs.download-path}}
         dir ./artifact | Select-Object Name,Length,LastWriteTime

      - name: Update scripts
        run: |
         $timestamp= (Get-Date -UFormat "%A %d/%m/%Y %T %Z")
         echo $timestamp
         git config --global user.email ${{ secrets.EMAIL }}
         git config --global user.name ${{ secrets.NAME }}
         git add -u
         git commit -m "PSScriptAnalyzer $timestamp"
         git push
