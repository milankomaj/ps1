# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: PSScriptAnalyzer

on:
  workflow_dispatch:

  pull_request:
    branches: [ main ]

jobs:
  build:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        include:
           - path: executables/BING_2
             script: bing-wallpaper.ps1
           - path: executables/Himawari
             script: himawari.ps1

    steps:
      - uses: actions/checkout@v2
      - name: Echo matrix details
        id: step1
        env:
          path: ${{ matrix.path }}
          script: ${{ matrix.script }}
        run: |
         echo $path $script

     # upload artifact (.ps1.bak)
      - name: Create .bak files
        run: |
         cp ./${{ matrix.path }}/${{ matrix.script }}{,.bak}
      - uses: actions/upload-artifact@v2
        with:
         path: |
          ./${{ matrix.path }}/${{ matrix.script }}.bak
          ./${{ matrix.path }}/*.sarif
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@2044ae068e37d0161fa2127de04c19633882f061
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          # Include your own basic security rules. Removing this option will run all the rules
          # includeRule: ''
          # excludeRule: '"PSAvoidUsingWriteHost", "PSAvoidTrailingWhitespace"'
          output: ./${{ matrix.path }}/${{ matrix.script }}.results.sarif
          path: ./${{ matrix.path }}
          recurse: false
          fix: true
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./${{ matrix.path }}/${{ matrix.script }}.results.sarif
      # Artifacts upload
      - uses: actions/upload-artifact@v2
        with:
         path: |
          ./${{ matrix.path }}/*.sarif
          ./${{ matrix.path }}/${{ matrix.script }}

     # virustotal
      - name: virustotal
        run: |
         sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " "
         sum=$(sha256sum ${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} | cut -f 1 -d " ")
         echo $sum
         echo UPLOAD
         curl -s --request POST \
          --url https://www.virustotal.com/api/v3/files \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
          --form file=@/${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }} \
         | jq 

         echo DATA
         curl -s --request GET \
          --url https://www.virustotal.com/api/v3/files/$sum \
          --header 'x-apikey: ${{ secrets.VTAPI }}' \
         | jq .data.attributes.last_analysis_stats

         echo meta test
         curl --request POST \
          --url https://api.metadefender.com/v4/file \
          -F "data=${{ github.workspace }}/${{ matrix.path }}/${{ matrix.script }}" \
          --header "apikey: ${{ secrets.META }}" \
          --header "Content-Type: application/octet-stream" \
          --header "filename: ${{ matrix.script }}" \
         | jq  



  